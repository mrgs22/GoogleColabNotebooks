{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPvP+N7BMjoKOtDHVSucnoq"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":17,"metadata":{"id":"F4hN94Ri9Y2x","executionInfo":{"status":"ok","timestamp":1699046712173,"user_tz":240,"elapsed":125,"user":{"displayName":"Gregory Sylvester","userId":"05010306304674874100"}}},"outputs":[],"source":["import numpy as np\n","from numpy import linalg as LA\n","from sklearn import decomposition\n","from sklearn import metrics"]},{"cell_type":"code","source":[],"metadata":{"id":"9lbi11mu_du6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["inputs = np.array([[123, 2355.2,34632],[346,664,34456]])\n","inputs_mean = np.mean(inputs, 0 )\n","print(\"mean matrix is :\" , inputs_mean)\n","inputs_cov = np.cov(np.transpose(inputs))\n","print(\"covarience matrix: \\n\", inputs_cov)\n","\n","w, v = LA.eig(inputs_cov)\n","print(\"\\n\\neigen values, eigen vectors: \\n\" , w ,\"\\n\", v)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3jnysMhw9lFi","executionInfo":{"status":"ok","timestamp":1699045201806,"user_tz":240,"elapsed":150,"user":{"displayName":"Gregory Sylvester","userId":"05010306304674874100"}},"outputId":"57421b39-634a-4cd5-d16b-7efc3b10b85d"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["mean matrix is : [  234.5  1509.6 34544. ]\n","covarience matrix: \n"," [[  24864.5  -188568.8   -19624.  ]\n"," [-188568.8  1430078.72  148825.6 ]\n"," [ -19624.    148825.6    15488.  ]]\n","\n","\n","eigen values, eigen vectors: \n"," [0.00000000e+00 1.47043122e+06 3.01251176e-12] \n"," [[-0.99150912 -0.13003717 -0.77412707]\n"," [-0.12933868  0.98618323 -0.16565817]\n"," [-0.01346003  0.10263023  0.61097025]]\n"]}]},{"cell_type":"code","source":["pcs = decomposition.PCA(n_components=2)\n","pcs.fit(inputs)\n","y = pcs.transform(inputs)\n","print(y)\n","xhat =pcs.inverse_transform(y)\n","mse = np.sum((inputs - xhat)**2)/2\n","print(\"\\n\\n\",xhat, \"\\n\\n\",mse)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_xd1oZY-95E6","executionInfo":{"status":"ok","timestamp":1699045699682,"user_tz":240,"elapsed":150,"user":{"displayName":"Gregory Sylvester","userId":"05010306304674874100"}},"outputId":"faa2c832-4703-4858-9530-0222c3a38f09"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 8.57447147e+02 -7.84927678e-14]\n"," [-8.57447147e+02  7.84927678e-14]]\n","\n","\n"," [[  123.   2355.2 34632. ]\n"," [  346.    664.  34456. ]] \n","\n"," 1.1410084133116715e-26\n"]}]},{"cell_type":"code","source":["\n","# Define your matrix A\n","A = np.array([[1, 2],\n","              [3, 4],\n","              [5, 6]])\n","\n","# Calculate the SVD\n","U, S, VT = np.linalg.svd(A)\n","\n","# U, S, and VT are the left singular vectors, singular values, and right singular vectors, respectively.\n","\n","# The diagonal matrix Î£ is typically represented as a 2D array (with 0s for non-diagonal elements), but we'll create it explicitly.\n","m, n = A.shape\n","Sigma = np.zeros((m, n))\n","Sigma[:min(m, n), :min(m, n)] = np.diag(S)\n","\n","# Now you have U, Sigma, and VT\n","print(\"U matrix:\")\n","print(U)\n","print(\"\\nSigma matrix:\")\n","print(Sigma)\n","print(\"\\nVT matrix:\")\n","print(VT)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5pD6808NBmYC","executionInfo":{"status":"ok","timestamp":1699045866967,"user_tz":240,"elapsed":168,"user":{"displayName":"Gregory Sylvester","userId":"05010306304674874100"}},"outputId":"63584fea-23d5-4c22-9925-e48fd8e916cd"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["U matrix:\n","[[-0.2298477   0.88346102  0.40824829]\n"," [-0.52474482  0.24078249 -0.81649658]\n"," [-0.81964194 -0.40189603  0.40824829]]\n","\n","Sigma matrix:\n","[[9.52551809 0.        ]\n"," [0.         0.51430058]\n"," [0.         0.        ]]\n","\n","VT matrix:\n","[[-0.61962948 -0.78489445]\n"," [-0.78489445  0.61962948]]\n"]}]},{"cell_type":"code","source":["\n","\n","# Define two probability distributions (as numpy arrays)\n","P = np.array([0.1, 0.2, 0.3, 0.4])  # The first distribution\n","Q = np.array([0.2, 0.2, 0.2, 0.4])  # The second distribution\n","\n","# Calculate the KL Divergence\n","kl_div = kl_divergence(P, Q)\n","\n","print(\"KL Divergence:\", kl_div)"],"metadata":{"id":"C_pjnNsTEmu5"},"execution_count":null,"outputs":[]}]}